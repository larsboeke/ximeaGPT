from flask import Flask, render_template, jsonify, request, make_response
from flask_socketio import SocketIO, emit
import flask
import os
import uploadData
from werkzeug.utils import secure_filename
from agent.AIResponse import AiResponse
import uploadData
from pymongo import MongoClient
import backend.user_utils as usr

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret_key'
socketio = SocketIO(app, cors_allowed_origins="*")

#set up the connection to the Mongodb
client = MongoClient('mongodb://192.168.11.30:27017/')
db = client['XIMEAGPT']
users_collection = db['users']
chats_collection = db['chats']
#structure of chats collection
# {
#     "_id": "unique_chat_id",
#     "user_id": "user_id",
#     "chat_title": "",
#     "messages": [
    #     {
    #         "sender": "user/client",
    #         "message": "The message sent by the user",
    #         "timestamp": "timestamp"
    #     },
    #     {
    #         "sender": "backend",
    #         "message": "The response generated by the backend",
    #         "timestamp": "timestamp",
    #         "feedback": { "rating": "positive/negative",
    #                        "comment": ""}
    #     },
    #     ...

    #       {"client_msg": "",
    #        "backend_msg": "",
    #        "timestamp": "",
    #        "feedback":""}



    # ],
# }
#Routing for the chatbot page
chats = [
    {
        'conversation_id': 'chat1',
        'messages': [
            {'role': 'user', 'content': 'Hello'},
            {'role': 'assistant', 'content': 'Hi there!'}
        ]
    },
    {
        'conversation_id': 'chat2',
        'messages': [
            {'role': 'assistant', 'content': 'How are you?'},
            {'role': 'user', 'content': 'I am doing great, thanks!'}
        ]
    },
    {
        'conversation_id': 'chat3',
        'messages': [
            {'role': 'user', 'content': 'What are you up to?'},
            {'role': 'assistant', 'content': 'Just working on a project.'}
        ]
    }
]
@app.route('/')
def index():
    # Check if the user has a cookie
    if 'ailean_user_id' in request.cookies:
        user_id = request.cookies.get('ailean_user_id')
        conversations = usr.get_chat_ids(user_id)
        print(conversations)
        return render_template('chatbot.html', user_id=user_id, chats=conversations)
    
    
    else:
        user_id = usr.add_user()
        response = flask.make_response()
        response.set_cookie('ailean_user_id', user_id)
        conversations = usr.get_chat_ids(user_id)
        return response, render_template('chatbot.html', user_id=user_id, chats=conversations)



@app.route('/upload', methods=['POST'])
def upload():
    if 'file' not in request.files:
        return "No file part", 400

    file = request.files['file']
    if file.filename == '':
        return "No selected file", 400

    file_name = secure_filename(file.filename)
    return f"File '{file_name}' uploaded successfully."

#react to client message
def generate_backend_message(conversation_id, user_prompt):
    #create airesponse object and request chat completion
    response_request = AiResponse(conversation_id, user_prompt)
    assistant_message, sources = response_request.chat_completion_request()
    
    return assistant_message, sources



#recieve client messages and send response
@socketio.on('send_message')
def handle_message(data):
    chat_id = data['chat_id']
    client_msg = data['text']
    print(f"Client message: {client_msg}")
    assistant_message, sources = generate_backend_message(chat_id, client_msg)
    print(f"Backend message: {assistant_message}")
    #add sources here
    # Emit the updated chat document back to the client ADD SOURCES
    socketio.emit('receive_response', assistant_message, sources)

@socketio.on('start_chat')
def start_chat(user_id):    
    chat_id = usr.create_chat(user_id)
    # Emit the chat ID back to the client
    socketio.emit('chat_started', chat_id)

@socketio.on('delete_chat')
def delete_chat(chat_id):
    ##Delete chat functionfrom User
    chats_collection.delete_one({'_id': chat_id})
    socketio.emit('chat_deleted', {'chat_id': chat_id})

@socketio.on('open_chat')
def open_chat(chat_id):
    # chat_id = data['chat_id']
    messages = usr.get_messages(chat_id)
    socketio.emit('chat_opened', messages)
    

    
@socketio.on('add_sources')
def add_sources(data):
    #array of chunks here
    socketio.emit('sources_added')
    
#Routing for the admin panel
@app.route('/admin/dashboard')
def admin_dashboard():
    stat1 = 234
    stat2 = 3
    stat3 = 34
    stat4 = 76
    return render_template('dashboard.html', stat1=stat1, stat2=stat2, stat3=stat3, stat4=stat4)

@app.route('/admin/documents')
def admin_documents():
    return render_template('documents.html')

@app.route('/admin/upload')
def admin_upload():
    return render_template('upload.html')

@app.route('/admin/feedback')
def admin_feedback():
    return render_template('feedback.html')

if __name__ == '__main__':
    socketio.run(app, host='0.0.0.0', port=5000)
 


